5.Scenario :You are managing a database for a food delivery application like Zomato. The database includes the following tables: Restaurant,Customer,Order,Review and Payment.


-> Create DataBase:

	CREATE DATABASE dbrestaurant;

-> Use DataBase:

	USE dbrestaurant

-> Tables:

	- Restaurant Table :

		- Create Table:
			CREATE TABLE Restaurants (
    			RestaurantID INT AUTO_INCREMENT PRIMARY KEY,
    			Name VARCHAR(255),
    			City VARCHAR(255),
    			CuisineType VARCHAR(100),
    			Rating DECIMAL(2,1),
    			AverageCostForTwo DECIMAL(10,2)
			);

		-Insert Records into Table:
			INSERT INTO Restaurants (Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
			('Tandoori Flames', 'Indore', 'Indian', 4.2, 600.00),
			('Pizza Hut', 'Indore', 'Italian', 4.5, 800.00)


	- Customers Table:

		-Create Table:
			CREATE TABLE Customers (
    			CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    			FirstName VARCHAR(255),
    			LastName VARCHAR(255),
    			Phone VARCHAR(20),
    			City VARCHAR(255),
    			JoinDate DATE
			);

		-Insert Records into Table:
			INSERT INTO Customers (FirstName, LastName, Phone, City, JoinDate) VALUES
		('Sachin', 'Yadav', '+918794856920', 'Indore', '2024-01-10'),
		('Amit', 'Sharma', '+918794856921', 'Indore', '2024-01-15')	


	

	- Orders Table :
		
		- Create Table:
			CREATE TABLE Orders (
    			OrderID INT AUTO_INCREMENT PRIMARY KEY,
    			CustomerID INT,
    			RestaurantID INT,
    			OrderDate DATETIME,
    			OrderAmount DECIMAL(10,2),
    			OrderStatus ENUM('Delivered', 'Cancelled', 'Pending'),
    			FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    			FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
			);


		- Insert Records into Table:
			INSERT INTO Orders (CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
			(1, 5, '2024-01-12 14:30:00', 600.00, 'Delivered'),
			(2, 13, '2024-01-18 19:45:00', 800.00, 'Delivered')



	- Review Table :

		- Create Table:
			CREATE TABLE Reviews (
    			ReviewID INT AUTO_INCREMENT PRIMARY KEY,
    			CustomerID INT,
    			RestaurantID INT,
    			Rating DECIMAL(2,1),
    			Comment TEXT,
    			ReviewDate DATE,
    			FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    			FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

		- Insert Records into Table:			
			INSERT INTO Reviews (CustomerID, RestaurantID, Rating, Comment, ReviewDate) VALUES
			(5, 14, 4, 'Food was great, but the service was slow.', '2024-01-19'),
			(1, 8, 5, 'Absolutely loved the food, great ambiance!', '2024-02-10')


	- Payments Table :
		
		- Create Table:
			CREATE TABLE Payments (
    			PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    			OrderID INT,
    			PaymentMethod ENUM('Card', 'Cash', 'Wallet'),
    			Amount DECIMAL(10,2),
    			PaymentDate DATETIME,
    			FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
			);

		- Insert Records into Table:
			INSERT INTO Payments (OrderID, PaymentMethod, Amount, PaymentDate) VALUES
			(1, 'Card', 600.00, '2024-01-12 15:00:00'),
			(5, 'Wallet', 450.00, '2024-02-19 21:00:00'),
			(12, 'Cash', 950.00, '2024-05-21 19:00:00');


Assignment Queries
1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
2. Find the total number of orders placed by each customer.
3. List all restaurants offering "Italian" cuisine in "Mumbai".
4. Calculate the total revenue generated by each restaurant from completed orders.
5. Retrieve the most recent order placed by each customer.
6. List customers who have not placed any orders yet.
7. Identify the most reviewed restaurants.
8. Find the most preferred payment method.
9. List the top 5 restaurants by total revenue.
10. Show the details of all cancelled orders along with the customer's and restaurant's names


	1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.

		- > SELECT Name Restaurant_Name,City Location FROM restaurants WHERE Rating >=4.5;

	2. Find the total number of orders placed by each customer.

		- > SELECT o.CustomerID,c.FirstName,c.LastName,COUNT(o.CustomerID) total_number_of_order FROM orders o INNER JOIN customers c ON o.CustomerID=c.CustomerID GROUP by o.CustomerID;

	3. List all restaurants offering "Italian" cuisine in "Mumbai".

		- > SELECT * FROM restaurants WHERE CuisineType="Italian" AND City="Mumbai"

	4. Calculate the total revenue generated by each restaurant from completed orders.

		- > SELECT o.RestaurantID,r.Name,r.City,SUM(o.OrderAmount) Total_Revenue FROM orders o INNER JOIN restaurants r ON o.RestaurantID=r.RestaurantID GROUP BY RestaurantID 

		:- Current date - CURDATE()  jab kabhi hum date me se date +/- krna ho toh INTERVAL 21 DAY use krte hai.

	5. Retrieve the most recent order placed by each customer.

		- > SELECT o.CustomerID,c.FirstName,c.LastName,MAX(o.OrderDate) Recent_Order FROM orders o INNER JOIN customers c ON c.CustomerID=o.CustomerID GROUP BY o.CustomerID;

	6. List customers who have not placed any orders yet.

		- >  SELECT c.* FROM customers c LEFT JOIN orders o ON c.CustomerID=o.CustomerID WHERE o.CustomerID IS null

		
	7. Identify the most reviewed restaurants.

		- > SELECT r.RestaurantID,r.Name,COUNT(re.RestaurantID) Most_Reviewed_Res FROM restaurants r INNER JOIN reviews re ON r.RestaurantID=re.RestaurantID GROUP BY re.RestaurantID ORDER BY COUNT(re.RestaurantID) DESC LIMIT 1

	8. Find the most preferred payment method.

		- >SELECT PaymentMethod,COUNT(PaymentMethod) Most_Preferred FROM payments GROUP BY PaymentMethod ORDER BY COUNT(PaymentMethod) DESC LIMIT 1

	9. List the top 5 restaurants by total revenue.

		- > SELECT r.RestaurantID,r.Name,r.City,sum(p.Amount) total_revenue FROM payments p INNER JOIN orders o ON p.OrderID=o.OrderID INNER JOIN restaurants r ON r.RestaurantID=o.RestaurantID GROUP BY o.RestaurantID ORDER BY total_revenue DESC LIMIT 5

	10. Show the details of all cancelled orders along with the customer's and restaurant's names
		
		- > SELECT r.RestaurantID,r.Name Restaurant_Name ,c.FirstName,c.LastName,o.OrderStatus FROM restaurants r INNER JOIN orders o ON r.RestaurantID=o.RestaurantID INNER JOIN customers c ON c.CustomerID=o.CustomerID  WHERE o.OrderStatus="Cancelled"

